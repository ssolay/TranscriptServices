import { ApiPostPayment } from './api-post-payment.interface';
import { Student } from './api-post-student.interface';

export interface ApiResponseOrder {
  level?: string;
  message?: string;
  orderHeader: {
    archiveStudent: string;
    chFlag: string;
    consentTypeAllowed?: string;
    consentTypeUsed?: string;
    createdTimestamp: string;
    feePathDesc?: string;
    feePathType: string;
    orderDate?: string;
    orderStatus: string;
    paperlessConsentFormAllowed: string;
    paymentStatus: string;
    preauthFee: number;
    preauthPaymentId?: number;
    referMethod: string;
    reqIdentifierType: number;
    requireReleaseFm: string;
    scOrderStatusId: number;
    toOrderId: number;
    toScprofilId: number;
    totalFee: number;
    totalFeePaid: number;
  };
  payment?: ApiPostPayment;
  recipients: {
    addDynamicWatermark: string;
    addPrintTemplate: string;
    addWatermark: string;
    allowFormatEtx: string;
    allowRevocation: string;
    allowStaticDocUpload: string;
    amountToCh: number;
    amountToSchool: number;
    attachments?: {
      originalFileName: string;
    }[],
    baseOpFee: number;
    consentFormDate?: string;
    createdTimestamp: string;
    credits: number;
    deliveryMethodId: number;
    digitalSignatureFee: number;
    electronicDeliveryFeePaidBy: string;
    email: string;
    frFeeReduction: number;
    handleFee: number;
    handleFeePaidBy: string;
    hasCertificate: string;
    isAckgInvalidAddress: string;
    isVerifiedAddress: string;
    maxNumberViews: number;
    noFeeFlag: number;
    offerDigitalRightsOption: string;
    offerPdfDelivery: string;
    orderProcessFee: number;
    orderStatus: string;
    orderTotal: number;
    organization: string;
    paymentStatus: string;
    pdfDeliveryFee: number;
    pdfDeliverySubtype: string;
    printFulfillment: string;
    printOption: number;
    printVendorDeliveryFeePaidBy: string;
    processingOption: string;
    quantityId: number;
    rightsManagmentFee: number;
    schoolPaidProcessFee: number;
    scOrderStatusId: number;
    sendToType: string;
    statusEffDate: string;
    suborderNumber: number;
    timestamp: string;
    toOrderId: number;
    toRecipientCategory?: string;
    toRecipientId: number;
    totalFee: number;
    totalFeePaid: number;
    visibleDigitalSignature: string;
    xcriptPurposeId: number;
    xcriptTypeId: number;
  }[];
  status: string;
  student: Student;
}
